#!/bin/bash

DARWIN="darwin"
DEBIAN="debian"
FEDORA="fedora"

DEPS_TO_INSTALL=()
DARWIN_DEPS=("cmake" "git" "python" "pip" "wget")
DEBIAN_DEPS=("clang" "cmake" "git" "python" "pip" "wget")
FEDORA_DEPS=("clang" "cmake" "gcc" "gcc-c++" "git" "python" "pip" "wget")

NO_COLOR="\033[0m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

REINSTALL=0
USAGE=0


function announce_install {

    # Announces Osso will be installing something.

    echo ""
    echo -e "${YELLOW}#####################################"
    echo -e "# ${WHITE}Osso's gonna install $@"
    echo -e "${YELLOW}#####################################"
    echo -e "${NO_COLOR}"

}


function compile_osso_executables {

    # Compiles Osso-specific C++ files for use with main osso script.

    echo -e "${YELLOW}#########################################"
    echo -e "${WHITE}Compiling Osso's dependent executables."
    echo -e "${YELLOW}#########################################"
    echo -e "${NO_COLOR}"

    (cd /opt/osso &&

            if [ -e build ]; then
                (cd /opt/osso && sudo mv build /tmp/build)
            fi &&

            sudo mkdir build &&
            (cd build && sudo cmake ..) &&
            (cd build && sudo make)
    )

}


function install_dependencies {

    # Ensures system is up-to-date and calls install function
f    # for each dependency.

    echo -e "${YELLOW}#########################"
    echo -e "${WHITE}Updating system packages"
    echo -e "${YELLOW}#########################"
    echo -e "${NO_COLOR}"

    if [ $OS = 'darwin' ]; then
        $INSTALLER update -y

    else
        sudo $INSTALLER update -y

    fi

    for dep in ${DEPS_TO_INSTALL[@]}; do
        package_install $dep

    done

}


function log_install {

    # FORTHCOMING. HAVEN'T IMPLEMENTED THIS YET CAUZ I DONE SLACKING.
    sudo echo "${1}" >> /tmp/osso_install_manifest

}


function os_type {

    # Just checks the system OS type and sets a global var.

    case `uname` in
        Linux )
            which dnf && { OS=${FEDORA}; return; }
            which apt-get && { OS=${DEBIAN}; return; }
            ;;

        Darwin )
            OS=${DARWIN}
            ;;

    esac

}


function package_install {

    # Handles logic for installing dependent packages. In cases where
    # installation methods vary by OS, a special block is called out
    # to install the package. Otherwise, the install is handled by 
    # the OS-specific installer.

    announce_install ${1}

    # Python
    if [ ${1} = "python"n ]; then

        if [ $OS = ${DARWIN} ]; then
            $INSTALLER install -y python
            $INSTALLER link python

        elif [ $OS = ${DEBIAN} ]; then
            sudo $INSTALLER install -y python2.7
            sudo ln -s /usr/bin/python2.7 /usr/bin/python

        elif [ $OS = ${FEDORA} ]; then
            sudo $INSTALLER install -y python


        fi

        log_install "python"

    # OpenMesh
    elif [ ${1} = "OpenMesh" ]; then

        if [ ${OS} = ${DARWIN} ]; then
            brew install open-mesh

        else
            version="6.2"
            url="http://www.openmesh.org/media/Releases/${version}/OpenMesh-${version}.tar.gz"
            dl_dir="/tmp/OpenMesh-${version}"

            wget ${url} -O ${dl_dir}.tar.gz
            (cd /tmp && tar xzf ${dl_dir}.tar.gz)
            mkdir -p ${dl_dir}/build

            (cd ${dl_dir}/build && \
                    cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILDAPPS=OFF &&
                    make &&
                    sudo make install
            )

            sudo ln -s /usr/local/include/OpenMesh /usr/include/OpenMesh

            if [ ${OS} = ${DEBIAN} ]; then
                lib_dir='/usr/lib'

            else
                lib_dir='/usr/lib64'

            fi

            for lib_file in /usr/local/lib/libOpenMesh*; do
                sudo ln -s ${lib_file} ${lib_dir}/$(basename ${lib_file})

            done

        fi

        log_install "OpenMesh"

    # OpenSCAD
    elif [ ${1} = "OpenSCAD" ]; then
        if [ ${OS} = ${DARWIN} ]; then
            brew tap caskroom/cask
            brew install --force Caskroom/cask/openscad

        elif [ ${OS} = ${DEBIAN} ]; then
            sudo add-apt-repository -y ppa:openscad/releases
            sudo apt-get update -y
            sudo apt-get -y install openscad

        elif [ ${OS} = ${FEDORA} ]; then
            sudo ${INSTALLER} install -y openscad

        fi

        log_install "OpenSCAD"

    # pip
    elif [ ${1} = "pip" ]; then
        if [ $OS != ${DARWIN} ]; then
            wget https://bootstrap.pypa.io/get-pip.py -O /tmp/get-pip.py
            sudo $(which python) /tmp/get-pip.py

        else

            if [ -z $(which pip) ]; then
                sudo easy_install pip

            fi

        fi

        log_install "pip"

    # SolidPython
    elif [ ${1} = "SolidPython" ]; then
        sudo $(which pip) install solidpython
        log_install "SolidPython"

    # sh (for Python)
    elif [ ${1} = "pip_sh" ]; then
        sudo $(which pip) install sh
        log_install "pip_sh"

    # packages that can be installed by system installer
    else
        if [ $OS = ${DARWIN} ]; then
            $INSTALLER install -y ${1}

        else
            sudo $INSTALLER install -y ${1}

        fi

        log_install ${1}

    fi

}


function preflight {

    # Checks for dependencies, then asks for permission to install
    # dependencies if any need to be installed.

    # create install manifest for future uninstall
    if [ -f /tmp/osso_install_manifest ]; then
        sudo rm /tmp/osso_install_manifest

    fi

    touch /tmp/osso_install_manifest


    echo -e "${YELLOW}"
    echo "################################################"
    echo -e "${WHITE}Checking for missing dependencies..."
    echo -e "${YELLOW}################################################"
    echo -e "${NO_COLOR}"
    sleep 1

    case $OS in
        ${DEBIAN} )
            _DEPS=${DEBIAN_DEPS[@]}
            INSTALLER=`which apt-get`
            ;;
        ${DARWIN} )
            _DEPS=${DARWIN_DEPS[@]}
            INSTALLER=`which brew`
            ;;
        ${FEDORA} )
            _DEPS=${FEDORA_DEPS[@]}
            INSTALLER=`which dnf`

    esac

    for key in $_DEPS; do

        if which $key > /dev/null; then
            echo -e "${CYAN}  -> found: $key"

        else
            DEPS_TO_INSTALL+=( $key )

        fi

    done


    # pip installations
    if [ -z  $(which pip) ]; then
        DEPS_TO_INSTALL+=( "SolidPython" )
        DEPS_TO_INSTALL+=( "pip_sh" )

    else
        if [ -z $(pip freeze | grep solidpython) ]; then
            DEPS_TO_INSTALL+=( "SolidPython" )

        else
            echo -e "${CYAN}  -> found SolidPython"

        fi

        if [ -z $(pip freeze | grep sh==) ]; then
            DEPS_TO_INSTALL+=( "pip_sh" )

        else
            echo -e "${CYAN}  -> found sh (python utility)"

        fi
    fi

    # OS X installations
    if [ ${OS} = ${DARWIN} ]; then
        if [ -z $(brew list | grep rapidjson) ]; then
            DEPS_TO_INSTALL+=( "rapidjson" )

        else
            echo -e "${CYAN}  -> found RapidJSON"

        fi

        brew tap caskroom/cask

        if [ -z $(brew cask list | grep openscad) ]; then
            DEPS_TO_INSTALL+=("OpenSCAD")

        else
            echo -e "${CYAN}  -> found OpenSCAD"

        fi

        if [ -z $(brew list | grep open-mesh) ]; then
            DEPS_TO_INSTALL+=( "OpenMesh" )

        else
            echo -e "${CYAN}  -> found OpenMesh"

        fi

    # Debian/Ubuntu installations
    elif [ ${OS} = ${DEBIAN} ]; then
        if [[ ! -d /usr/include/rapidjson && ! -d /usr/local/include/rapidjson/ ]]; then
            DEPS_TO_INSTALL+=( "rapidjson-dev" )

        else
            echo -e "${CYAN}  -> found RapidJSON"

        fi

        if [ -z $(which openscad) ]; then
            DEPS_TO_INSTALL+=( "OpenSCAD" )

        else
            echo -e "${CYAN}  -> found OpenSCAD"

        fi

        if [ ! -d /usr/local/include/OpenMesh ]; then
            DEPS_TO_INSTALL+=( "OpenMesh" )

        else
            echo -e "${CYAN}  -> found OpenMesh"

        fi

    # Fedora/RHEL/CentOS installations
    elif [ ${OS} = ${FEDORA} ]; then
         if [ ! -d /usr/local/include/rapidjson ]; then
             DEPS_TO_INSTALL+=( "rapidjson-devel" )

         else
             echo -e "${CYAN}  -> found RapidJSON"

         fi

         if [ -z $(which openscad) ]; then
             DEPS_TO_INSTALL+=( "OpenSCAD" )

         else
             echo -e "${CYAN}  -> found OpenSCAD"

         fi

         if [ ! -d /usr/local/include/OpenMesh ]; then
             DEPS_TO_INSTALL+=( "OpenMesh" )

         else
             echo -e "${CYAN}  -> found OpenMesh"

         fi
    fi



    function prompt_install {

        # If the target system is missing dependencies, this lets
        # the user know that some dependencies will be installed,
        # and asks for permission. If no deps are required, just
        # acknowledges that, and says LET'S FUCKING DO THIS.

        if [ ${#DEPS_TO_INSTALL[@]} -eq 0 ]; then
            echo -e "${YELLOW}#################################################################"
            echo -e "${WHITE}Radical! Looks like you have all the stuff I need to get started!"
            echo -e "${YELLOW}#################################################################"
            return

        else
            echo -e "${YELLOW}#####################################"
            echo -e "${WHITE}I'm gonna need to install some stuff:"
            echo -e "${YELLOW}#####################################"
            for key in ${DEPS_TO_INSTALL[@]}; do
                echo -e "    ${GREEN}- $key"

            done

            echo -e "${YELLOW}################################################"
            echo ""
            echo -e "${NO_COLOR}That alright? [${GREEN}Y${NO_COLOR}/${RED}n${NO_COLOR}]: "

            read -s response

            case $response in
                no|No|NO|n|N|0 )
                    echo ""
                    echo ":( Dangit. Ok, see you some other time, maybe."
                    exit 0
                    ;;

                yes|Yes|YES|y|Y|1|"" )
                    :
                    ;;

                *)
                    prompt_install
                    ;;

            esac
        fi

    }

    prompt_install

}


function check_already_installed {

    # Checks if Osso has already been installed, and lets user know
    # how to reinstall if they REALLY want to.
    if [[ `command -v osso` && REINSTALL -eq 0 ]]; then
        echo ""
        echo -e "${WHITE}Looks like Osso has already been installed on this machine."
        echo "To reinstall, run this installer again using the -r or --reinstall flag."

        exit 1

    fi

}


function welcome {

    # Introduces Osso installer, checks for dependency requirements,
    # and ALWAYS asks for permission.

    echo ""
    echo -e "${YELLOW}################################################################################"
    echo ""
    echo "                   OOOOO       /SSS\      /SSS\       OOOOO"
    echo "                 OO     OO    SS   SS    SS   SS    OO     OO"
    echo "                 OO     OO     SS         SS        OO     OO"
    echo "                 OO  o  OO      SS         SS       OO  o  OO"
    echo "                 OO     OO       SS         SS      OO     OO"
    echo "                 OO     OO        SS         SS     OO     OO"
    echo "                   OOOOO           SS        SS      OOOOO"
    echo "                               SS  SS   SS   SS"
    echo "                                \SSS/    \SSS/"
    echo ""
    echo ""
    echo ""
    echo "          $ osso [-h] [--help] [-r] [--reinstall] [-c] [--compile]"
    echo ""
    echo ""
    echo -e "${YELLOW}################################################################################"
    echo -e "${WHITE}  Thanks for choosing OSSO for your 3D-printing endeavors! I hope you enjoy!"
    echo -e "     To get started, I may need to install a few things. Sound ok? [${GREEN}Y${WHITE}/${RED}n${WHITE}]"
    echo -e "${YELLOW}################################################################################"
    echo -e "${NO_COLOR}"

    function get_response {

        read -s response

        case $response in
            yes|Yes|YES|y|Y|1|"" )
                echo -e "${RED}"
                echo "           AA    WW    WW  EEEEE    SS      OO    MM    MM  EEEEE  !!!"
                echo "          A  A   WW    WW  EE     SS  SS  OO  OO  MMM  MMM  EE     !!!"
                echo "         AAAAAA  WW WW WW  EEEE   SS      OO  OO  MM MM MM  EEEE   !!!"
                echo "        A      A WWW  WWW  EE      SS     OO  OO  MM    MM  EE     !!!"
                echo "        A      A WW    WW  EEEEE    SS      OO    MM    MM  EE     !!!"
                echo "                 WW    WW            SS                     EE"
                echo "                                 SS  SS                     EEEEE  !!!"
                echo "                                 SS SS                             !!!"
                echo "                                   SS"
                echo ""
                sleep 1
                echo -e "${RED}              First I need to check out your system and stuff..."
                echo ""
                echo ""
                echo -e "${YELLOW}################################################################################"
                echo ""
                sleep 1.5
                return
                ;;

            no|No|NO|n|N|0 )
                echo "Gotcha. See you later, pal. Let the record show that the operation has been canceled."
                exit 1
                ;;

            * )
                echo "Sorry, there buddy. I am a program, and only speak binary. Please answer yes or no."
                echo ""
                get_response
                ;;

        esac

    }

    get_response

}


function main {

    # Check flags for special cases
    for arg in $@; do
        if [[ ${arg} = '-h' || ${arg} = "--help" ]]; then
            usage

        elif [[ ${arg} = "-r" || ${arg} = "--reinstall" ]]; then
            REINSTALL=1

        elif [[ ${arg} = '-c' || ${arg} = "--compile" ]]; then
            compile_osso_executables
            exit 0

        fi

    done

    clear
    check_already_installed
    welcome
    os_type

    case $OS in
        ${DARWIN} )
            echo -e "${YELLOW}I LOVE OS X. COOL TO THE MAX!!"
            echo -e "${NO_COLOR}"

            if [ -z `which brew` ]; then
                echo -e "${RED}Sorry, but I need Homebrew to finish up. "\
                     "Can you please install Homebrew and fire me back up?"
                exit 1
            fi
            ;;

        ${DEBIAN} )
            echo -e "${YELLOW}Oooh snap! Skubuntu is my favorite! We are so much alike."
            echo -e "${NO_COLOR}"
            ;;

        ${FEDORA} )
            echo -e "${YELLOW}DNF with Fedora is all I'm really sayin' though."
            echo -e "${NO_COLOR}"
            ;;

        * ) echo "Operating system not supported. Please use OS X, Debian/Ubuntu, " \
                 "or CentOS/Fedora/RHEL. If you feel like you've received this message " \
                 "in error, please file an issue listing your system details so we can " \
                 "reproduce the issue. If you'd like to add support for your OS, you " \
                 "can either submit a feature request, or fork osso and get after it!"
            ;;

    esac

    preflight
    install_dependencies


    # Grab Osso Source
    echo -e "${YELLOW}#########################################################"
    echo -e "${WHITE}Grabbing Osso's source code and installing"
    echo -e "${YELLOW}#########################################################"
    if [ -d /opt/osso ]; then
        sudo rm -rf /opt/osso

    fi

    git clone https://github.com/wieden-kennedy/osso /tmp/osso
    sudo mv /tmp/osso /opt/

    if [ ! -L /usr/local/bin/osso ]; then
        sudo chmod +x /opt/osso/src/scripts/osso.py
        sudo ln -s /opt/osso/src/scripts/osso.py /usr/local/bin/osso

    fi

    if [ ! -L /usr/local/bin/osso_connector ]; then
        sudo ln -s /opt/osso/src/scripts/connector.py /usr/local/bin/osso_connector

    fi

    echo -e "${YELLOW}#########################################################"
    echo -e "${WHITE}Compiling super radical C++ programs"
    echo -e "${YELLOW}#########################################################"


    # Compile Shared Executables
    compile_osso_executables

    sudo mv /tmp/osso_install_manifest /opt/osso/.install_manifest

    # PROFIT
    echo -e "${GREEN}_______   _______    ______   ________  ______  ________"
    echo "|       \ |       \  /      \ |        \|      \|        \ "
    echo "| \$\$\$\$\$\$\$\| \$\$\$\$\$\$\$\|  \$\$\$\$\$\$\| \$\$\$\$\$\$\$\$ \\$\$\$\$\$\$ \\$\$\$\$\$\$\$\$"
    echo "| \$\$__/ \$\$| \$\$__| \$\$| \$\$  | \$\$| \$\$__      | \$\$     | \$\$"
    echo "| \$\$    \$\$| \$\$    \$\$| \$\$  | \$\$| \$\$  \     | \$\$     | \$\$"
    echo "| \$\$\$\$\$\$\$ | \$\$\$\$\$\$\$\| \$\$  | \$\$| \$\$\$\$\$     | \$\$     | \$\$"
    echo "| \$\$      | \$\$  | \$\$| \$\$__/ \$\$| \$\$       _| \$\$_    | \$\$ __"
    echo "| \$\$      | \$\$  | \$\$ \\$\$    \$\$| \$\$      |   \$\$ \   | \$\$|  \\"
    echo " \\$\$       \\$\$  |\\$\$  \\$\$\$\$\$\$  \\$\$       \\$\$\$\$\$\$    \\$\$| \$\$"
    echo "                                                      \\$"
    sleep .5

    echo ""
    echo "_______   _______    ______   ________  ______  ________"
    echo "|       \ |       \  /      \ |        \|      \|        \ "
    echo "| \$\$\$\$\$\$\$\| \$\$\$\$\$\$\$\|  \$\$\$\$\$\$\| \$\$\$\$\$\$\$\$ \\$\$\$\$\$\$ \\$\$\$\$\$\$\$\$"
    echo "| \$\$__/ \$\$| \$\$__| \$\$| \$\$  | \$\$| \$\$__      | \$\$     | \$\$"
    echo "| \$\$    \$\$| \$\$    \$\$| \$\$  | \$\$| \$\$  \     | \$\$     | \$\$"
    echo "| \$\$\$\$\$\$\$ | \$\$\$\$\$\$\$\| \$\$  | \$\$| \$\$\$\$\$     | \$\$     | \$\$"
    echo "| \$\$      | \$\$  | \$\$| \$\$__/ \$\$| \$\$       _| \$\$_    | \$\$ __"
    echo "| \$\$      | \$\$  | \$\$ \\$\$    \$\$| \$\$      |   \$\$ \   | \$\$|  \\"
    echo " \\$\$       \\$\$   \\$\$  \\$\$\$\$\$\$  \\$\$       \\$\$\$\$\$\$    \\$\$| \$\$"
    echo "                                                      \\$"
    sleep .5

    echo ""
    echo "_______   _______    ______   ________  ______  ________"
    echo "|       \ |       \  /      \ |        \|      \|        \ "
    echo "| \$\$\$\$\$\$\$\| \$\$\$\$\$\$\$\|  \$\$\$\$\$\$\| \$\$\$\$\$\$\$\$ \\$\$\$\$\$\$ \\$\$\$\$\$\$\$\$"
    echo "| \$\$__/ \$\$| \$\$__| \$\$| \$\$  | \$\$| \$\$__      | \$\$     | \$\$"
    echo "| \$\$    \$\$| \$\$    \$\$| \$\$  | \$\$| \$\$  \     | \$\$     | \$\$"
    echo "| \$\$\$\$\$\$\$ | \$\$\$\$\$\$\$\| \$\$  | \$\$| \$\$\$\$\$     | \$\$     | \$\$"
    echo "| \$\$      | \$\$  | \$\$| \$\$__/ \$\$| \$\$       _| \$\$_    | \$\$ __"
    echo "| \$\$      | \$\$  | \$\$ \\$\$    \$\$| \$\$      |   \$\$ \   | \$\$|  \\"
    echo " \\$\$       \\$\$   \\$\$  \\$\$\$\$\$\$  \\$\$       \\$\$\$\$\$\$    \\$\$| \$\$"
    sleep .5

    echo ""
    echo ""
    echo -e "${YELLOW}################################################################################"
    echo -e "${WHITE} Thanks again for choosing OSSO! To get started, check out the tutorial on our"
    echo -e "${WHITE} Github page. It's got all the goods you need to get started. Enjoy!"
    echo -e "${YELLOW}################################################################################"
    echo -e "${NO_COLOR}"

}

main $@
